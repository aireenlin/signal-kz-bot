import sys
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes, \
    ConversationHandler
import sqlite3
import os
import logging
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CATEGORY, DESCRIPTION, LOCATION, PHOTO, CONFIRM = range(5)
COMMENT = 0  # –î–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
VIOLATION_CATEGORIES = [
    "–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Å–≤–∞–ª–∫–∞",
    "–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–¥—ã",
    "–í—ã–±—Ä–æ—Å –æ—Ç—Ö–æ–¥–æ–≤",
    "–ü–æ–∂–∞—Ä",
    "–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è –≤—ã—Ä—É–±–∫–∞",
    "–°–∫–æ—Ç–æ–º–æ–≥–∏–ª—å–Ω–∏–∫",
    "–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è –æ—Ö–æ—Ç–∞",
    "–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —Ä—ã–±–æ–ª–æ–≤—Å—Ç–≤–æ",
    "–î—Ä—É–≥–æ–µ"
]


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def setup_database():
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            role TEXT DEFAULT 'user',
            reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports (
            report_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            category TEXT,
            description TEXT,
            latitude REAL,
            longitude REAL,
            photo_id TEXT,
            status TEXT DEFAULT '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS status_updates (
            update_id INTEGER PRIMARY KEY AUTOINCREMENT,
            report_id INTEGER,
            official_id INTEGER,
            status TEXT,
            comment TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (report_id) REFERENCES reports(report_id),
            FOREIGN KEY (official_id) REFERENCES users(user_id)
        )
    ''')

    conn.commit()
    conn.close()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(update: Update):
    user = update.effective_user
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('''
                   INSERT
                   OR IGNORE INTO users (user_id, username, first_name, last_name, role, reg_date)
    VALUES (?, ?, ?, ?, ?, ?)
                   ''', (user.id, user.username, user.first_name, user.last_name, 'user', datetime.now()))

    conn.commit()
    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    register_user(update)

    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Signal KZ!\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.\n\n"
        f"–î–ª—è –ø–æ–¥–∞—á–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report\n"
        f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myreports\n"
        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    )


# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
async def start_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    register_user(update)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category in VIOLATION_CATEGORIES:
        keyboard.append([InlineKeyboardButton(category, callback_data=f"cat_{category}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )



    return CATEGORY


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    category = query.data.replace("cat_", "")
    context.user_data['category'] = category

    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."
    )

    return DESCRIPTION


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text
    context.user_data['description'] = description

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    location_button = KeyboardButton(
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
        request_location=True
    )
    reply_markup = ReplyKeyboardMarkup(
        [[location_button]],
        one_time_keyboard=True,
        resize_keyboard=True
    )

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è.",
        reply_markup=reply_markup
    )

    return LOCATION


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    context.user_data['latitude'] = location.latitude
    context.user_data['longitude'] = location.longitude

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è."
    )

    return PHOTO


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    photo_id = photo_file.file_id
    context.user_data['photo_id'] = photo_id

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await update.message.reply_photo(
        photo=photo_id,
        caption=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data['category']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']}\n"
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {context.user_data['latitude']}, {context.user_data['longitude']}\n\n"
                f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_yes"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
            ]
        ])
    )

    return CONFIRM


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
async def confirm_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_yes":
        user_id = update.effective_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ë–î
        conn = sqlite3.connect('signal_kz.db')
        cursor = conn.cursor()

        cursor.execute('''
                       INSERT INTO reports
                       (user_id, category, description, latitude, longitude, photo_id, status, created_at, updated_at)
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                       ''', (
                           user_id,
                           context.user_data['category'],
                           context.user_data['description'],
                           context.user_data['latitude'],
                           context.user_data['longitude'],
                           context.user_data['photo_id'],
                           '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                           datetime.now(),
                           datetime.now()
                       ))

        report_id = cursor.lastrowid
        conn.commit()
        await notify_moderators(context, report_id, context.user_data)
        conn.close()

        # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_caption(
            caption=f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /myreports"
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

    else:
        await query.edit_message_caption(
            caption="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
        context.user_data.clear()


    return ConversationHandler.END


# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
async def notify_moderators(context, report_id, report_data):
    print(report_data)
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    cursor.execute('''
    SELECT user_id FROM users WHERE role = "moderator"
    ''')
    moderators = cursor.fetchall()
    print(moderators)
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    for moderator in moderators:
        moderator_id = moderator[0]
        print(moderator_id)
        try:
            await context.bot.send_photo(
                chat_id=moderator_id,
                photo=report_data['photo_id'],
                caption=f"üö® –ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò ‚Ññ{report_id} üö®\n\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {report_data['category']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {report_data['description']}\n"
                        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {report_data['latitude']}, {report_data['longitude']}\n\n",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"mod_approve_{report_id}"),
                        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_reject_{report_id}")
                    ],
                    [InlineKeyboardButton(
                        "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                        url=f"https://www.google.com/maps/search/?api=1&query={report_data['latitude']},{report_data['longitude']}"
                    )]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def moderator_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    action = data[1]  # approve –∏–ª–∏ reject
    report_id = int(data[2])

    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    cursor.execute('SELECT * FROM reports WHERE report_id = ?', (report_id,))
    report = cursor.fetchone()

    if not report:
        await query.edit_message_text("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return

    if action == "approve":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ù–æ–≤–æ–µ"
        cursor.execute('UPDATE reports SET status = "–ù–æ–≤–æ–µ", updated_at = ? WHERE report_id = ?',
                       (datetime.now(), report_id))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≥–æ—Å–æ—Ä–≥–∞–Ω–æ–≤
        cursor.execute('''
                       SELECT r.category, r.description, r.latitude, r.longitude, r.photo_id, r.user_id
                       FROM reports r
                       WHERE r.report_id = ?
                       ''', (report_id,))
        report_data = cursor.fetchone()

        report_info = {
            'category': report_data[0],
            'description': report_data[1],
            'latitude': report_data[2],
            'longitude': report_data[3],
            'photo_id': report_data[4],
            'user_id': report_data[5]
        }

        # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö
        await notify_officials(context, report_id, report_info)

        # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
        try:
            await context.bot.send_message(
                chat_id=report_info['user_id'],
                text=f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id} –æ–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ä–∞–±–æ—Ç—É!"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        await query.edit_message_caption(
            caption=f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id} –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≥–æ—Å–æ—Ä–≥–∞–Ω–∞–º."
        )

    else:  # reject
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
        cursor.execute('UPDATE reports SET status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º", updated_at = ? WHERE report_id = ?',
                       (datetime.now(), report_id))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        cursor.execute('SELECT user_id FROM reports WHERE report_id = ?', (report_id,))
        user_id = cursor.fetchone()[0]

        # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        await query.edit_message_caption(
            caption=f"‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
        )

    conn.close()


# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö –æ –Ω–æ–≤–æ–º –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
async def notify_officials(context, report_id, report_data):
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö
    cursor.execute('SELECT user_id FROM users WHERE role = "official"')
    officials = cursor.fetchall()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –≥–æ—Å—Å–ª—É–∂–∞—â–µ–º—É
    for official in officials:
        official_id = official[0]

        try:
            await context.bot.send_photo(
                chat_id=official_id,
                photo=report_data['photo_id'],
                caption=f"üö® –ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï ‚Ññ{report_id} üö®\n\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {report_data['category']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {report_data['description']}\n"
                        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {report_data['latitude']}, {report_data['longitude']}\n\n"
                        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update_status {report_id}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(
                        "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                        url=f"https://www.google.com/maps/search/?api=1&query={report_data['latitude']},{report_data['longitude']}"
                    )],
                    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{report_id}")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–æ—Å—Å–ª—É–∂–∞—â–µ–º—É {official_id}: {e}")


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
async def my_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('''
                   SELECT report_id, category, description, status, created_at
                   FROM reports
                   WHERE user_id = ?
                   ORDER BY created_at DESC
                   ''', (user_id,))

    reports = cursor.fetchall()
    conn.close()

    if not reports:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return

    for report in reports:
        report_id, category, description, status, created_at = report

        await update.message.reply_text(
            f"–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ‚Ññ{report_id}", callback_data=f"view_{report_id}")]
            ])
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
async def change_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    report_id = int(data[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Å–ª—É–∂–∞—â–∏–º
    user_id = update.effective_user.id
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    role = cursor.fetchone()[0]
    conn.close()

    if role != "official":
        await query.edit_message_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –≥–æ—Å–æ—Ä–≥–∞–Ω–æ–≤.")
        return

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    statuses = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "–†–µ—à–µ–Ω–æ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"]
    keyboard = []
    for status in statuses:
        keyboard.append([InlineKeyboardButton(status, callback_data=f"status_{report_id}_{status}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_caption(
        caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{report_id}:",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
async def status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    report_id = int(data[1])
    new_status = "_".join(data[2:])  # –î–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data['pending_status_update'] = {
        'report_id': report_id,
        'new_status': new_status
    }

    if query.message.photo or query.message.video:
        await query.edit_message_caption(
            caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å '{new_status}' –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{report_id}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞:"
        )
    else:
        await query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å '{new_status}' –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{report_id}.\n"
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞:"
        )


    return COMMENT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç–∞—Ç—É—Å—É
async def process_status_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    report_id = context.user_data['pending_status_update']['report_id']
    new_status = context.user_data['pending_status_update']['new_status']
    official_id = update.effective_user.id

    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è
    cursor.execute('''
                   UPDATE reports
                   SET status     = ?,
                       updated_at = ?
                   WHERE report_id = ?
                   ''', (new_status, datetime.now(), report_id))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
    cursor.execute('''
                   INSERT INTO status_updates (report_id, official_id, status, comment, created_at)
                   VALUES (?, ?, ?, ?, ?)
                   ''', (report_id, official_id, new_status, comment, datetime.now()))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —Å–æ–∑–¥–∞–≤—à–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
    cursor.execute('SELECT user_id FROM reports WHERE report_id = ?', (report_id,))
    user_id = cursor.fetchone()[0]

    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üì£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{report_id}\n\n"
                 f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}\n"
                 f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await update.message.reply_text(
        f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{report_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'."
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('pending_status_update', None)

    return ConversationHandler.END


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è (–¥–ª—è –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö) - –∫–æ–º–∞–Ω–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
async def update_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Å–ª—É–∂–∞—â–∏–º
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    role = cursor.fetchone()[0]
    conn.close()

    if role != "official":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –≥–æ—Å–æ—Ä–≥–∞–Ω–æ–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –æ–±—Ä–∞—â–µ–Ω–∏—è
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ–±—Ä–∞—â–µ–Ω–∏—è: /update_status ID")
        return

    report_id = int(context.args[0])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM reports WHERE report_id = ?', (report_id,))
    report = cursor.fetchone()
    conn.close()

    if not report:
        await update.message.reply_text(f"–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    statuses = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "–†–µ—à–µ–Ω–æ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"]
    keyboard = []
    for status in statuses:
        keyboard.append([InlineKeyboardButton(status, callback_data=f"status_{report_id}_{status}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ{report_id}:",
        reply_markup=reply_markup
    )


# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    role = result[0] if result else "user"
    conn.close()

    # –ë–∞–∑–æ–≤–∞—è –ø–æ–º–æ—â—å –¥–ª—è –≤—Å–µ—Ö
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/report - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏\n"
        "/myreports - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if role == "moderator":
        help_text += (
            "–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n"
            "/pending_reports - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
        )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö
    if role == "official":
        help_text += (
            "–î–ª—è –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö:\n"
            "/update_status ID - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
            "/all_reports - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        )

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if role == "admin":
        help_text += (
            "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
            "/set_role ID ROLE - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (user, moderator, official, admin)\n"
            "/register_official - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Å—Å–ª—É–∂–∞—â–µ–≥–æ\n"
            "/register_moderator - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        )

    await update.message.reply_text(help_text)


# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT role FROM users WHERE user_id = ?', (admin_id,))
    role = cursor.fetchone()[0]

    if role != "admin":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        conn.close()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role USER_ID ROLE")
        conn.close()
        return

    try:
        user_id = int(context.args[0])
        new_role = context.args[1]
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        conn.close()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if not user:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –¥–æ–ø—É—Å—Ç–∏–º–æ–π
    if new_role not in ["user", "moderator", "official", "admin"]:
        await update.message.reply_text("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏: user, moderator, official, admin")
        conn.close()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
    cursor.execute('UPDATE users SET role = ? WHERE user_id = ?', (new_role, user_id))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Å—Å–ª—É–∂–∞—â–µ–≥–æ
async def register_official(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('UPDATE users SET role = "official" WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –≥–æ—Å–æ—Ä–≥–∞–Ω–∞.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –∏ —Å–º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å—ã."
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def register_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('UPDATE users SET role = "moderator" WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –∏ —Å–º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∏—Ö."
    )


# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
async def pending_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    role = cursor.fetchone()[0]

    if role != "moderator" and role != "admin":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        conn.close()
        return

    ## –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
async def pending_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    role = cursor.fetchone()[0]

    if role != "moderator" and role != "admin":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        conn.close()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    cursor.execute('''
    SELECT report_id, category, description, created_at FROM reports 
    WHERE status = '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
    ORDER BY created_at DESC
    ''')

    reports = cursor.fetchall()
    conn.close()

    if not reports:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return

    for report in reports:
        report_id, category, description, created_at = report

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        conn = sqlite3.connect('signal_kz.db')
        cursor = conn.cursor()

        cursor.execute('SELECT photo_id, latitude, longitude FROM reports WHERE report_id = ?', (report_id,))
        photo_id, latitude, longitude = cursor.fetchone()
        conn.close()

        await update.message.reply_photo(
            photo=photo_id,
            caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id}\n"
                   f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
                   f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"mod_approve_{report_id}"),
                    InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_reject_{report_id}")
                ],
                [InlineKeyboardButton(
                    "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                    url=f"https://www.google.com/maps/search/?api=1&query={latitude},{longitude}"
                )]
            ])
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π (–¥–ª—è –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö)
async def all_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Å–ª—É–∂–∞—â–∏–º
    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT role FROM users WHERE user_id = ?', (user_id,))
    role = cursor.fetchone()[0]

    if role != "official" and role != "admin":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –≥–æ—Å–æ—Ä–≥–∞–Ω–æ–≤.")
        conn.close()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
    cursor.execute('''
    SELECT report_id, category, description, status, created_at FROM reports 
    WHERE status != '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' AND status != '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º' AND status != '–†–µ—à–µ–Ω–æ'
    ORDER BY created_at DESC LIMIT 10
    ''')

    reports = cursor.fetchall()
    conn.close()

    if not reports:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return

    for report in reports:
        report_id, category, description, status, created_at = report

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        conn = sqlite3.connect('signal_kz.db')
        cursor = conn.cursor()

        cursor.execute('SELECT photo_id, latitude, longitude FROM reports WHERE report_id = ?', (report_id,))
        photo_id, latitude, longitude = cursor.fetchone()
        conn.close()

        await update.message.reply_photo(
            photo=photo_id,
            caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id}\n"
                   f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                   f"–°—Ç–∞—Ç—É—Å: {status}\n"
                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
                   f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{report_id}")],
                [InlineKeyboardButton(
                    "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                    url=f"https://www.google.com/maps/search/?api=1&query={latitude},{longitude}"
                )]
            ])
        )

# –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
async def view_report_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    report_id = int(query.data.split("_")[1])

    conn = sqlite3.connect('signal_kz.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    cursor.execute('''
    SELECT category, description, latitude, longitude, photo_id, status, created_at, updated_at
    FROM reports WHERE report_id = ?
    ''', (report_id,))

    report = cursor.fetchone()

    if not report:
        await query.edit_message_text("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return

    category, description, latitude, longitude, photo_id, status, created_at, updated_at = report

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
    cursor.execute('''
    SELECT s.status, s.comment, s.created_at, u.first_name, u.last_name
    FROM status_updates s
    JOIN users u ON s.official_id = u.user_id
    WHERE s.report_id = ?
    ORDER BY s.created_at DESC
    ''', (report_id,))

    status_history = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    details = f"–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{report_id}\n\n"
    details += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
    details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
    details += f"–°—Ç–∞—Ç—É—Å: {status}\n"
    details += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
    details += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_at}\n"
    details += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}\n\n"

    if status_history:
        details += "–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞:\n"
        for sh in status_history[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
            status, comment, date, first_name, last_name = sh
            official_name = f"{first_name} {last_name}" if first_name and last_name else "–ì–æ—Å—Å–ª—É–∂–∞—â–∏–π"
            details += f"‚Ä¢ {date}: {status} ({official_name})\n"
            if comment:
                details += f"  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await query.message.reply_photo(
        photo=photo_id,
        caption=details,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                url=f"https://www.google.com/maps/search/?api=1&query={latitude},{longitude}"
            )]
        ])
    )





# –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    setup_database()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token("8061380333:AAF8QAg0JDHVthZ8fLeATG1bYE4Y9FRLQ9c").build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("myreports", my_reports))
    application.add_handler(CommandHandler("update_status", update_status_command))
    application.add_handler(CommandHandler("register_official", register_official))
    application.add_handler(CommandHandler("register_moderator", register_moderator))
    application.add_handler(CommandHandler("pending_reports", pending_reports))
    application.add_handler(CommandHandler("all_reports", all_reports))
    application.add_handler(CommandHandler("set_role", set_role))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
    report_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("report", start_report)],
        states={
            CATEGORY: [CallbackQueryHandler(category_selected, pattern=r"^cat_")],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            LOCATION: [MessageHandler(filters.LOCATION, get_location)],
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            CONFIRM: [CallbackQueryHandler(confirm_report, pattern=r"^confirm_")]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(report_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    status_update_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(status_callback, pattern=r"^status_")],
        states={
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_status_comment)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(status_update_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(CallbackQueryHandler(moderator_decision, pattern=r"^mod_"))
    application.add_handler(CallbackQueryHandler(change_status_callback, pattern=r"^change_status_"))
    application.add_handler(CallbackQueryHandler(view_report_details, pattern=r"^view_"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()